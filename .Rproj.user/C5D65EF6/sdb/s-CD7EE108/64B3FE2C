{
    "contents" : "##########################################################################################################\n##                                                                                                      ##  \n## title: \"run_analysis.R\"                                                                              ##\n## author: \"jvmunoz\"                                                                                    ## \n## date: \"Sunday, July 20, 2014\"                                                                        ##  \n## Description:                                                                                         ##\n##    This programm applies the following steps to the UCI HAR Dataset downloaded from                  ##\n##    https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip            ## \n##    1.- Merges the training and the test sets to create one data set.                                 ##\n##    2.- Extracts only the measurements on the mean and standard deviation for each measurement.       ##\n##    3.- Uses descriptive activity names to name the activities in the data set.                       ##\n##    4.- Appropriately labels the data set with descriptive variable names.                            ##\n##    5.- Creates a second, independent tidy data set with the average of each variable for each        ##\n##        activity and each subject.                                                                    ##\n##                                                                                                      ##\n##########################################################################################################\n\n\n# First of all we set and clean up the workspace. \n\nif(getwd()!=\"C:/Users/JoseVicente/Desktop/Data Science/Johns Hopkins/Getting and Cleaning Data/Getting-and-Cleaning-Data-Course-Project\")\n{\n   setwd(\"C:/Users/JoseVicente/Desktop/Data Science/Johns Hopkins/Getting and Cleaning Data/Getting-and-Cleaning-Data-Course-Project\")\n}\n\nrm(list=ls())\n\n\n# 1.- Merges the training and the test sets to create one data set.\n\n# 1.1 Reads data from files\n\nfeatures       <- read.table('./UCI HAR Dataset/features.txt',header=FALSE)            #imports features.txt\n\nactivityLabels <- read.table('./UCI HAR Dataset/activity_labels.txt',header=FALSE)     #imports activity_labels.txt\n\nsubjectTrain   <- read.table('./UCI HAR Dataset/train/subject_train.txt',header=FALSE) #imports subject_train.txt\nsubjectTest    <- read.table('./UCI HAR Dataset/test/subject_test.txt',header=FALSE)   #imports subject_test.txt\n\nxTrain         <- read.table('./UCI HAR Dataset/train/x_train.txt',header=FALSE)       #imports x_train.txt\nxTest          <- read.table('./UCI HAR Dataset/test/x_test.txt',header=FALSE)         #imports x_test.txt\n\nyTrain         <- read.table('./UCI HAR Dataset/train/y_train.txt',header=FALSE)       #imports y_train.txt\nyTest          <- read.table('./UCI HAR Dataset/test/y_test.txt',header=FALSE)         #imports y_test.txt\n\n# 1.2 Assigns column names to the previous data\n\ncolnames(activityLabels)  <- c('activityId','activityType')\n\ncolnames(subjectTrain)    <- \"subjectId\"\ncolnames(subjectTest)     <- \"subjectId\"\n\ncolnames(xTrain)          <- features[,2] \ncolnames(xTest)           <- features[,2]\n\ncolnames(yTrain)          <- \"activityId\"\ncolnames(yTest)           <- \"activityId\"\n\n# 1.3 Creates the final training set by merging subjectTrain, yTrain and xTrain \n\ntraining <- cbind(subjectTrain,yTrain,xTrain)\n\n# 1.4 Creates the final test set by merging subjectTest, yTest, and xTest\n\ntest <- cbind(subjectTest,yTest,xTest)\n\n# 1.5 Combines training and test data to create a final data set\n\nfinal <- rbind(training,test)\n\n\n# 2.- Extracts only the measurements on the mean and standard deviation for each measurement. \n\n# 2.1 Creates a vector for the column names of final \n#     it will be used to select the desired mean() & std() columns\n\ncolNames <- colnames(final)\n\n# 2.2 Creates a vector that contains TRUE values for subjectID, activityID, \n#     mean() & std() and FALSE for the rest\n#     we do not consider variables with meanFreq \n\nvariablesIwant <- (\n        grepl(\"subject..\",colNames) |         \n        grepl(\"activity..\",colNames) |\n        (grepl(\"-mean..\",colNames) & !grepl(\"-meanFreq..\",colNames)) |\n        grepl(\"-std..\",colNames)\n        )\n\n# 2.3 Subsets final depending on the vector variablesIwant\n\nfinal <- final[variablesIwant==TRUE]\n\n\n# 3. Uses descriptive activity names to name the activities in the data set.\n\n# 3.1 Merges final with activityLabels to add activity description\n\nfinal <- merge(final,activityLabels,by='activityId',all.x=TRUE)\n\n# 3.2 We have added a new variable to final, so\n#     we must update colNames vector to consider this\n\ncolNames <- colnames(final)\n\n\n# 4. Appropriately labels the data set with descriptive variable names. \n\n# 4.1 Let's replace variable names by more significant ones \n\nfor (i in 1:length(colNames)) \n{\n\n        colNames[i] <- gsub(\"[()-]\",\"\",colNames[i])      # removes parenthesis and dashes\n        \n        colNames[i] <- gsub(\"mean\",\"Mean\",colNames[i])   # changes mean into Mean\n        colNames[i] <- gsub(\"std\",\"Std\",colNames[i])     # changes std into Std\n      \n\n        colNames[i] <- gsub(\"^(t)\",\"time\",colNames[i])   # changes variables beginning with t into time\n        colNames[i] <- gsub(\"^(f)\",\"freq\",colNames[i])   # changes variables beginning with f into freq\n        \n        colNames[i] <- gsub(\"([Gg]ravity)\",\"Gravity\",colNames[i])\n        colNames[i] <- gsub(\"([Bb]ody[Bb]ody|[Bb]ody)\",\"Body\",colNames[i])\n        colNames[i] <- gsub(\"[Gg]yro\",\"Gyro\",colNames[i])\n        colNames[i] <- gsub(\"[Aa]cc\",\"Acc\",colNames[i])\n        colNames[i] <- gsub(\"[Mm]ag\",\"Magnitude\",colNames[i])\n        colNames[i] <- gsub(\"[Jj]erk\",\"Jerk\",colNames[i])\n}\n\n# 4.2 We must update colNames vector again\n\ncolnames(final) <- colNames\n\n# 4.3 Export the final data set \n\nwrite.table(final, \"./UCI HAR Dataset/tidyData1.txt\",row.names=FALSE,sep='\\t')\n\n\n# 5. Creates a second, independent tidy data set with the average of each variable for each activity and each subject.\n\n# 5.1 Create a new table, finalNoActivityType without the activityType column\n\nfinalNoActivityType <- final[,names(final) != 'activityType']\n\n# 5.2 Summarizing the finalDataNoActivityType table to include just the mean of each variable for each activity and each subject\n\ntidyData <- aggregate(finalNoActivityType[,names(finalNoActivityType) != c('activityId','subjectId')],\n                      by=list(activityId=finalNoActivityType$activityId,subjectId = finalNoActivityType$subjectId),\n                      mean)\n\n# 5.3 Merging the tidyData with activityLabels to include descriptive acitvity names\n\ntidyData <- merge(tidyData,activityLabels,by='activityId',all.x=TRUE)\n\n# 5.4 Export the tidyData set \n\nwrite.table(tidyData, \"./UCI HAR Dataset/tidyData2.txt\",row.names=FALSE,sep='\\t')",
    "created" : 1405894177729.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2880908372",
    "id" : "64B3FE2C",
    "lastKnownWriteTime" : 1406369489,
    "path" : "C:/Users/JoseVicente/Desktop/Data Science/Johns Hopkins/Getting and Cleaning Data/Getting-and-Cleaning-Data-Course-Project/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}